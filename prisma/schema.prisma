generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  problems      Problem[]
}

model VerificationToken {
  // This model is now correct for MongoDB
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Problem {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  problemId      String?
  name           String
  platform       String?
  problemCode    String?
  link           String?
  difficulty     String
  status         String
  category       String[]
  notes          String?
  mistakesMade   String?
  dateSolved     DateTime? 
  reviewCount    Int?      @default(0)
  nextReviewDate DateTime?
  stability      Float?
  fsrsDifficulty Float?
  lastRating     Int?
  lastReview     DateTime?
}